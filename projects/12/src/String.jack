// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array data;
    field int capacity;
    field int length;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int cap) {
      if(cap = 0){
        let cap = 1;
      }
      let capacity = cap;
     // let data = Array.new(capacity);
      let length = 0;
      let data =  Memory.alloc(capacity);
      //  do Memory.poke(2060, data);
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do data.dispose();
      // do Memory.free(data);
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      // do Memory.poke(2060, data);
      // do Memory.poke(2061, j);
      return data[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      let data[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      if(length = capacity){
        let capacity = capacity + capacity;
        let data = Memory.realloc(data, capacity);
      }
      let data[length]=c;
      let length = length + 1;
      return this;
    }
    
    method Array charArray() {
      return data;
    }

    method int capacity() {
      return capacity;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      let length = length - 1;
      let data[length] = 0;
      return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
      var int val, i, d;
      var boolean neg;
      let neg=false;
      let val = 0;
      let i = 0;
      while(i < length) {
        if(i=0 & (data[i]=45) ){
          let neg = true;
          let i = i+1;
        } else {
          let d = data[i] - 48;
          if( (d < 0) | (d > 9 )) {
            do Output.printString("not valide number");
            do Output.println();
            return 0;
          }
          let val = val*10 + d;
          let i = i+1;
        }
      }
      if(neg){
        let  val = -val;
      }
       
      return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      let length = 0;
      do intToString(val);
      return;
    }

    method void intToString(int val) {
      var int lastDigit, nval;
      
      if(val < 0) {
        let val = -val;
        do appendChar(45);
        do intToString(val);
        return;
      }

      if(val < 10){
        do appendChar(val + 48);
        return;
      } else {
        let nval = val / 10;
        let lastDigit = val - (nval * 10);
        do intToString(nval);
        do appendChar(lastDigit + 48);
        return;
      }
    }

    function String toString(int val) {
      var String str ;
      let str = String.new(16);
      do str.setInt(val);
      return str;
    }

    // function in mod(int a, int m) {
    //   return a - (m * (a / m)); // r
    // }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
